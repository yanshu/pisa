"""
The purpose of this stage is to load in events generated from Monte Carlo
simulations.

This service in particular reads in from files having a similar structure to
the low energy event samples. More information about these event samples
can be found on
https://wiki.icecube.wisc.edu/index.php/IC86_Tau_Appearance_Analysis
https://wiki.icecube.wisc.edu/index.php/IC86_oscillations_event_selection
"""
from operator import add

import numpy as np
import pint
from uncertainties import unumpy as unp

from pisa import ureg, Q_
from pisa.core.stage import Stage
from pisa.core.events import Data
from pisa.core.map import Map, MapSet
from pisa.core.binning import OneDimBinning, MultiDimBinning
from pisa.utils.flavInt import ALL_NUFLAVINTS, NuFlavIntGroup, FlavIntDataGroup
from pisa.utils.fileio import from_file
from pisa.utils.comparisons import normQuant
from pisa.utils.hash import hash_obj
from pisa.utils.log import logging
from pisa.utils.profiler import profile


class sample(Stage):
    """mc service to load in events from an event sample.

    Parameters
    ----------
    params: ParamSet of sequence with which to instantiate a ParamSet
        Parameters which set everything besides the binning

        Parameters required by this service are
            * mc_sample_config : filepath
                Filepath to event sample configuration

            * output_events : bool
                Flag to specify whether the service output returns a MapSet
                or the Events

    output_binning : MultiDimBinning or convertible thereto
        The binning desired for the output maps.

    transform_groups : string
        Specifies which particles/interaction types to use for computing the
        transforms.

    error_method : None, bool, or string
        If None, False, or empty string, the stage does not compute errors for
        the transforms and does not apply any (additional) error to produce its
        outputs. (If the inputs already have errors, these are propagated.)

    debug_mode : None, bool, or string
        If None, False, or empty string, the stage runs normally.
        Otherwise, the stage runs in debug mode. This disables caching (forcing
        recomputation of any nominal transforms, transforms, and outputs).

    transforms_cache_depth
    outputs_cache_depth : int >= 0

    Output Names
    ----------
    The `outputs` container generated by this service will be objects with the
    following `name` attribute:
        * 'nue_cc+nuebar_cc'
        * 'numu_cc+numubar_cc'
        * 'nutau_cc+nutaubar_cc'
        * 'nuall_nc+nuallbar_nc'
        * 'muons'
        * 'noise'

    """
    def __init__(self, params, output_binning, output_names, error_method=None,
                 debug_mode=None, disk_cache=None, memcache_deepcopy=True,
                 transforms_cache_depth=20, outputs_cache_depth=20):
        self.sample_hash = None
        """Hash of event sample"""

        expected_params = (
            'mc_sample_config', 'output_events'
        )

        self.neutrino = False
        self.muons = False
        self.noise = False

        output_names = output_names.replace(' ','').split(',')
        clean_outnames = []
        self._output_nu_groups = []
        for name in output_names:
            if 'muons' in name:
                self.muons = True
                clean_outnames.append(name)
            elif 'noise' in name:
                self.noise = True
                clean_outnames.append(name)
            elif 'all_nu' in name:
                self.neutrino = True
                self._output_nu_groups = \
                        [NuFlavIntGroup(f) for f in ALL_NUFLAVINTS]
            else:
                self.neutrino = True
                self._output_nu_groups.append(NuFlavIntGroup(name))

        if self.neutrino:
            clean_outnames += [str(f) for f in self._output_nu_groups]

        super(self.__class__, self).__init__(
            use_transforms=False,
            params=params,
            expected_params=expected_params,
            output_names=clean_outnames,
            error_method=error_method,
            debug_mode=debug_mode,
            disk_cache=disk_cache,
            memcache_deepcopy=memcache_deepcopy,
            outputs_cache_depth=outputs_cache_depth,
            transforms_cache_depth=transforms_cache_depth,
            output_binning=output_binning
        )

        self.include_attrs_for_hashes('sample_hash')

    @profile
    def _compute_nominal_outputs(self):
        """Load the baseline events specified by the config file."""
        self.config = from_file(self.params['mc_sample_config'].value)
        self.load_sample_events()

    @profile
    def _compute_outputs(self, inputs=None):
        """Compute nominal histograms for output channels."""
        outputs = []
        if self.neutrino:
            trans_nu_data = self._data.transform_groups(
                self._output_nu_groups
            )
            for fig in trans_nu_data.iterkeys():
                outputs.append(self._data.histogram(
                    kinds       = fig,
                    binning     = self.output_binning,
                    weights_col = 'pisa_weight',
                    errors      = True,
                    name        = str(NuFlavIntGroup(fig)),
                ))

        if self.muons:
            outputs.append(self._data.histogram(
                kinds       = 'muons',
                binning     = self.output_binning,
                weights_col = 'pisa_weight',
                errors      = True,
                name        = 'muons',
                tex         = r'\rm{muons}'
            ))

        if self.params['output_events'].value:
            return self._data
        else:
            name = self.config.get('general', 'name')
            return MapSet(maps=outputs, name=name)

    def load_sample_events(self):
        """Load the event sample given the configuration file and output
        groups. Hash this object using both the configuration file and
        the output types."""
        hash_property = [self.config, self.neutrino, self.muons]
        this_hash = hash_obj(normQuant(hash_property))
        if this_hash == self.sample_hash:
            return

        logging.info(
            'Extracting events using configuration file {0} and output names '
            '{1}'.format(hash_property[0], hash_property[1])
        )
        def parse(string):
            return string.replace(' ', '').split(',')
        event_types = parse(self.config.get('general', 'event_type'))

        events = []
        if self.neutrino:
            if 'neutrino' not in event_types:
                raise AssertionError('`neutrino` field not found in '
                                     'configuration file.')
            nu_data = self.load_neutrino_events(
                config=self.config,
            )
            events.append(nu_data)
        if self.muons:
            if 'muons' not in event_types:
                raise AssertionError('`muons` field not found in '
                                     'configuration file.')
            muon_events = self.load_muon_events(
                config=self.config,
            )
            events.append(muon_events)
        self._data = reduce(add, events)
        self.sample_hash = this_hash

    @staticmethod
    def load_neutrino_events(config):
        def parse(string):
            return string.replace(' ', '').split(',')
        name = config.get('general', 'name')
        flavours = parse(config.get('neutrino', 'flavours'))
        weights = parse(config.get('neutrino', 'weights'))
        sys_list = parse(config.get('neutrino', 'sys_list'))
        base_suffix = config.get('neutrino', 'basesuffix')
        if base_suffix == 'None': base_suffix = ''

        nu_data = []
        for idx, flav in enumerate(flavours):
            f = int(flav)
            all_flavints = NuFlavIntGroup(f,-f).flavints()
            flav_fidg = FlavIntDataGroup(
                flavint_groups=all_flavints
            )
            prefixes = []
            for sys in sys_list:
                ev_sys = 'neutrino:' + sys
                nominal = config.get(ev_sys, 'nominal')
                ev_sys_nom = ev_sys + ':' + nominal
                prefixes.append(config.get(ev_sys_nom, 'file_prefix'))
            if len(set(prefixes)) > 1:
                raise AssertionError(
                    'Choice of nominal file is ambigous. Nominal '
                    'choice of systematic parameters must coincide '
                    'with one and only one file. Options found are: '
                    '{0}'.format(prefixes)
                )
            file_prefix = flav + prefixes[0]
            events_file = config.get('general', 'datadir') + \
                    base_suffix + file_prefix

            events = from_file(events_file)
            cc_mask = events['ptype'] > 0
            nc_mask = events['ptype'] < 0
            nu_mask = events['interaction'] == 1
            nubar_mask = events['interaction'] == 2

            if weights[idx] == 'None' or weights[idx] == '1':
                events['pisa_weight'] = \
                        np.ones(events['ptype'].shape)
            elif weights[idx] == '0':
                events['pisa_weight'] = \
                        np.zeros(events['ptype'].shape)
            else:
                events['pisa_weight'] = events[weights[idx]]

            if 'zenith' in events and 'coszen' not in events:
                events['coszen'] = np.cos(events['zenith'])
            if 'reco_zenith' in events and 'reco_coszen' not in events:
                events['reco_coszen'] = np.cos(events['reco_zenith'])

            for flavint in all_flavints:
                i_mask = cc_mask if flavint.isCC() else nc_mask
                t_mask = nu_mask if flavint.isParticle() else nubar_mask

                flav_fidg[flavint] = {var: events[var][i_mask & t_mask]
                                      for var in events.iterkeys()}
            nu_data.append(flav_fidg)
        nu_data = Data(reduce(add, nu_data), metadata={'name': name})

        return nu_data

    @staticmethod
    def load_muon_events(config):
        name = config.get('general', 'name')
        def parse(string):
            return string.replace(' ', '').split(',')
        sys_list = parse(config.get('muons', 'sys_list'))
        weight = config.get('muons', 'weight')
        base_suffix = config.get('muons', 'basesuffix')
        if base_suffix == 'None': base_suffix = ''

        paths = []
        for sys in sys_list:
            ev_sys = 'muons:' + sys
            nominal = config.get(ev_sys, 'nominal')
            ev_sys_nom = ev_sys + ':' + nominal
            paths.append(config.get(ev_sys_nom, 'file_path'))
        if len(set(paths)) > 1:
            raise AssertionError(
                'Choice of nominal file is ambigous. Nominal '
                'choice of systematic parameters must coincide '
                'with one and only one file. Options found are: '
                '{0}'.format(paths)
            )
        file_path = paths[0]

        muons = from_file(file_path)

        if weight == 'None' or weight == '1':
            muons['pisa_weight'] = \
                    np.ones(muons['weights'].shape)
        elif weight == '0':
            muons['pisa_weight'] = \
                    np.zeros(muons['weights'].shape)
        else:
            muons['pisa_weight'] = muons[weight]

        if 'zenith' in muons and 'coszen' not in muons:
            muons['coszen'] = np.cos(muons['zenith'])
        if 'reco_zenith' in muons and 'reco_coszen' not in muons:
            muons['reco_coszen'] = np.cos(muons['reco_zenith'])

        muon_dict = {'muons': muons}
        return Data(muon_dict, metadata={'name': name})

    def validate_params(self, params):
        assert isinstance(params['mc_sample_config'].value, basestring)
        assert isinstance(params['output_events'].value, bool)
