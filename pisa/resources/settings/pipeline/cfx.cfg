#include settings/osc/nufitv20.cfg
#include settings/osc/earth.cfg

#------------------------------------------------------------------------------
# Settings directly affecting or handled by the template maker
#------------------------------------------------------------------------------

[pipeline]

# define order of stages to be excecuted one after another, and specify the
# service to use for each of them as stage1:serviceA, stage2:serviceB, ...
order = data:sample, mc:weight, unfold:roounfold

# Select the params denoted by param.<param_selector>.<param_name>
param_selections = nh, iron

# Folder to store disk caches
cache_dir = /data/mandalia/data/cache

#------------------------------------------------------------------------------
# Binning definitions, linked back to from stage definitions
#------------------------------------------------------------------------------

[binning]

# NOTE: field NAME and UNITS must match those in the pickle file
true_allsky.order = coszen, energy
true_allsky.energy = {'num_bins':10, 'is_log':True, 'domain':[1,300] * units.GeV, 'tex': r'$E_{\rm true}$'}
true_allsky.coszen = {'num_bins':4, 'is_lin':True, 'domain':[-1,1], 'tex':r'$\cos\,\theta_{Z,{\rm true}}$'}

reco_allsky.order = reco_coszen, reco_energy
reco_allsky.reco_energy = {'num_bins':30, 'is_log':True, 'domain':[0.1,600] * units.GeV, 'tex': r'$E_{\rm reco}$'}
reco_allsky.reco_coszen = {'num_bins':4, 'is_lin':True, 'domain':[-1,1], 'tex':r'$\cos\,\theta_{Z,{\rm reco}}$'}

unsmeared_allsky.order = coszen, energy
unsmeared_allsky.energy = {'num_bins':10, 'is_log':True, 'domain':[1,300] * units.GeV, 'tex': r'$E_{\rm unsmeared}$'}
unsmeared_allsky.coszen = {'num_bins':4, 'is_lin':True, 'domain':[-1,1], 'tex':r'$\cos\,\theta_{Z,{\rm unsmeared}}$'}

#------------------------------------------------------------------------------
# DATA
#------------------------------------------------------------------------------

[stage:data]

# instantiation arguments
output_binning = reco_allsky
output_names = all_nu

error_method = None
debug_mode = False
outputs_cache_depth = 100
# TODO(shivesh): figure out why this needs to be True
memcache_deepcopy = True

# params:
# * event selection config file
param.data_sample_config = settings/mc/leesard.cfg

# * dataset - pick which systematic set to use from the config file
#   examples: nominal, neutrino:dom_eff:1.05, muons:hole_ice:0.01
#   the nominal set will be used for the event types not specified
param.dataset = nominal

# * cuts
param.keep_criteria = None

# * return events as output instead of MapSet
param.output_events_data = True

#------------------------------------------------------------------------------
# MC
#------------------------------------------------------------------------------

[stage:mc]

# instantiation arguments
output_binning = <!stage:data|output_binning!>
input_names = <!stage:data|output_names!>
output_names = all_nu

error_method = <!stage:data|error_method!>
debug_mode = <!stage:data|debug_mode!>
disk_cache = <!pipeline|cache_dir!>/mc/flux.sqlite
outputs_cache_depth = <!stage:data|outputs_cache_depth!>
memcache_deepcopy = <!stage:data|memcache_deepcopy!>

# params:
# * return events as output instead of MapSet
param.output_events_mc = True

# * livetime
# param.livetime = 8.3670796E7 units.s
param.livetime = 1 units.common_year
param.livetime.fixed = True

# * diff xsec nu shape parameter
param.nu_dis_a = 0.0 +/- 0.0757
param.nu_dis_a.fixed = False
param.nu_dis_a.range = nominal + [0., +3.] * sigma

# * diff xsec nu normalisation parameter
param.nu_dis_b = 1.0 +/- 0.875
param.nu_dis_b.fixed = False
param.nu_dis_b.range = nominal + [-3., 0.] * sigma

# * diff xsec nubar shape parameter
param.nubar_dis_a = 0.0 +/- 0.1008
param.nubar_dis_a.fixed = False
param.nubar_dis_a.range = nominal + [0., +3.] * sigma

# * diff xsec nubar normalisation parameter
param.nubar_dis_b = 1.0 +/- 0.818
param.nubar_dis_b.fixed = False
param.nubar_dis_b.range = nominal + [-3., 0.] * sigma

# * flux params
param.cache_flux = True
param.flux_file = flux/honda-2015-spl-solmax-aa.d

# * atmospheric index offset
param.atm_delta_index = 0.0 +/- 0.05
param.atm_delta_index.fixed = False
param.atm_delta_index.range = nominal + [-4., +4.] * sigma

# * nu/nubar ratio
param.nu_nubar_ratio = 1.0 +/- 0.1
param.nu_nubar_ratio.fixed = False
param.nu_nubar_ratio.range = nominal + [-3., +3.] * sigma

# * nue/numu ratio
param.nue_numu_ratio = 1.0 +/- 0.03
param.nue_numu_ratio.fixed = False
param.nue_numu_ratio.range = nominal + [-10., +10.] * sigma

# * absolute numu normalisation
# TODO(shivesh): find sigma/ranges
param.norm_numu = 1.0
param.norm_numu.fixed = True
param.norm_numu.prior = uniform
param.norm_numu.range = [-1.0, 3.0] * units.dimensionless

# * absolute nutau normalisation
param.norm_nutau = 1.0
param.norm_nutau.fixed = True
param.norm_nutau.prior = uniform
param.norm_nutau.range = [-1.0, 3.0] * units.dimensionless

# * absolute neutral current normalisation
param.norm_nc = 1.0
param.norm_nc.fixed = True
param.norm_nc.prior = uniform
param.norm_nc.range = [-1.0, 3.0] * units.dimensionless

# * absolute atmospheric muon normalisation
param.norm_atmmu = 1.0
param.norm_atmmu.fixed = True
param.norm_atmmu.prior = uniform
param.norm_atmmu.range = [-1.0, 3.0] * units.dimensionless

# * absolute noise normalisation
param.norm_noise = 1.0
param.norm_noise.fixed = True
param.norm_noise.prior = uniform
param.norm_noise.range = [-1.0, 3.0] * units.dimensionless

# * oscillations
param.oscillate = True

# * Earth
param.earth_model = osc/PREM_12layer.dat
param.YeI = <!earth|YeI!>
param.YeM = <!earth|YeM!>
param.iron.YeO = 0.4656
param.pyrolite.YeO = 0.4957

# * detector
param.detector_depth = <!earth|detector_depth!>
param.prop_height = <!earth|prop_height!>

# * mixing values
param.no_nc_osc = False
param.theta12 = <!osc|theta12!>
param.theta12.fixed = True

param.nh.theta13 = <!osc|theta13_nh!>
param.nh.theta13.fixed = False
param.nh.theta13.range = nominal + [-3.25, +3] * sigma

param.ih.theta13 = <!osc|theta13_ih!>
param.ih.theta13.fixed = False
param.ih.theta13.range = nominal + [-3.25, +3] * sigma

param.nh.theta23 = <!osc|theta23_nh!>
param.nh.theta23.fixed = False
param.nh.theta23.range = [31, 59] * units.deg
param.nh.theta23.prior = <!osc|theta23_nh.prior!>
param.nh.theta23.prior.data = <!osc|theta23_nh.prior.data!>

param.ih.theta23 = <!osc|theta23_ih!>
param.ih.theta23.fixed = False
param.ih.theta23.range = nominal + [-10.9, +3.8] * units.deg
param.ih.theta23.prior = <!osc|theta23_ih.prior!>
param.ih.theta23.prior.data = <!osc|theta23_ih.prior.data!>

param.nh.deltacp = <!osc|deltacp_nh!>
param.nh.deltacp.fixed = True

param.ih.deltacp = <!osc|deltacp_ih!>
param.ih.deltacp.fixed = True

param.deltam21 = <!osc|deltam21!>
param.deltam21.fixed = True

param.nh.deltam31 = <!osc|deltam31_nh!>
param.nh.deltam31.fixed = False
param.nh.deltam31.range = nominal + [-0.16e-3, +0.54e-3] * units.eV**2

param.ih.deltam31 = <!osc|deltam31_ih!>
param.ih.deltam31.fixed = False
param.ih.deltam31.range = nominal + [-0.13e-3, 0.47e-3] * units.eV**2

#------------------------------------------------------------------------------
# UNFOLD
#------------------------------------------------------------------------------

[stage:unfold]

# instantiation arguments
reco_binning = reco_allsky
true_binning = unsmeared_allsky
input_names = <!stage:data|output_names!>
output_names = numu_cc+numubar_cc

error_method = <!stage:mc|error_method!>
debug_mode = <!stage:mc|debug_mode!>
disk_cache = None
# disk_cache = <!pipeline|cache_dir!>/unfold/roounfold.sqlite
outputs_cache_depth = <!stage:mc|outputs_cache_depth!>
memcache_deepcopy = <!stage:mc|memcache_deepcopy!>

# params:
# * create the response object otherwise load from disk_cache
param.create_response = True

# * random seed for statistical fluctuations, set to 0 for nominal
param.stat_fluctuations = 1234

# * regularisation parameter
#   for Bayesian unfolding, this specifies the number of iterations.
#   setting to 0 does not do any unfolding and instead returns the true reco
#   map in the true_binning.
param.regularisation = 2

# * optimize regularization parameter - `create_response` must be `True`
#   for Bayesian unfolding, this find the minimum of the chi2 between truth to
#   find the optimal number of iterations.
param.optimize_reg = False

#------------------------------------------------------------------------------
# DISCRETE SYSTEMATICS
#------------------------------------------------------------------------------

[stage:discr_sys]

input_binning = <!stage:unfold|true_binning!>
output_binning = <!stage:discr_sys|input_binning!>
input_names = <!stage:unfold|output_names!>

error_method = <!stage:unfold|error_method!>
debug_mode = <!stage:unfold|debug_mode!>
disk_cache = <!pipeline|cache_dir!>/discr_sys/discrete_sys.sqlite
outputs_cache_depth = <!stage:unfold|outputs_cache_depth!>
memcache_deepcopy = <!stage:unfold|memcache_deepcopy!>

# params:
# * event selection config file
param.data_sample_config = <!stage:data|data_sample_config!>

# * extract templates up to this stage for the fitting (that should be before
#   the stage in which these actual fits get applied...)
param.stop_after_stage = 3
